To fulfill the requirements for building a Human Resource Management System (HRMS) with a database schema, RESTful APIs, 
and a frontend interface, we'll proceed step-by-step. Below, I'll outline the database schema design, provide example 
code for the backend API using Node.js and Express, and suggest a frontend structure using React for managing employee data, 
department assignments, and performance reviews.

### 1. Database Schema Design

Based on the requirements, here's a suggested schema for the HRMS:

#### Tables:

- **employees**:
  - `employee_id` (Primary Key)
  - `first_name`
  - `last_name`
  - `email`
  - `phone`
  - `hire_date`
  - `created_at`
  - `updated_at`

- **departments**:
  - `department_id` (Primary Key)
  - `department_name`
  - `created_at`
  - `updated_at`

- **roles**:
  - `role_id` (Primary Key)
  - `role_name`
  - `department_id` (Foreign Key to `departments`)
  - `created_at`
  - `updated_at`

- **performance_reviews**:
  - `review_id` (Primary Key)
  - `employee_id` (Foreign Key to `employees`)
  - `review_date`
  - `reviewer_name`
  - `comments`
  - `created_at`
  - `updated_at`

### 2. Backend API using Node.js and Express

#### Dependencies:
- Express.js: Web framework for Node.js
- Sequelize: ORM for SQL databases
- JSON Web Tokens (JWT): For authentication and authorization

#### Example API Implementation:

Assuming you have Sequelize configured with a MySQL database, here's an example of how you might implement 
the backend API endpoints for managing employee records, department assignments, and performance reviews:

##### `server.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Sequelize, DataTypes } = require('sequelize');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Replace with your actual database connection details
const sequelize = new Sequelize('database_name', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql',
});

// Define models
const Employee = sequelize.define('Employee', {
  employee_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  first_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  last_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  phone: DataTypes.STRING,
  hire_date: DataTypes.DATE,
});

const Department = sequelize.define('Department', {
  department_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  department_name: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
});

const Role = sequelize.define('Role', {
  role_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  role_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
});

const PerformanceReview = sequelize.define('PerformanceReview', {
  review_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  review_date: DataTypes.DATE,
  reviewer_name: DataTypes.STRING,
  comments: DataTypes.TEXT,
});

// Define associations
Employee.belongsTo(Department);
Employee.belongsTo(Role);
PerformanceReview.belongsTo(Employee);

// Example authentication middleware with JWT
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// Routes
// Example route to get all employees
app.get('/api/employees', authenticateToken, async (req, res) => {
  try {
    const employees = await Employee.findAll();
    res.json(employees);
  } catch (err) {
    console.error('Error fetching employees:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to add a new employee
app.post('/api/employees', authenticateToken, async (req, res) => {
  const { first_name, last_name, email, phone, hire_date, department_id, role_id } = req.body;
  try {
    const newEmployee = await Employee.create({
      first_name,
      last_name,
      email,
      phone,
      hire_date,
      departmentId: department_id,
      roleId: role_id,
    });
    res.status(201).json(newEmployee);
  } catch (err) {
    console.error('Error adding employee:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to update an employee
app.put('/api/employees/:employeeId', authenticateToken, async (req, res) => {
  const { employeeId } = req.params;
  const { first_name, last_name, email, phone, hire_date, department_id, role_id } = req.body;
  try {
    const employee = await Employee.findByPk(employeeId);
    if (!employee) {
      return res.status(404).json({ error: 'Employee not found' });
    }
    await employee.update({
      first_name,
      last_name,
      email,
      phone,
      hire_date,
      departmentId: department_id,
      roleId: role_id,
    });
    res.json(employee);
  } catch (err) {
    console.error('Error updating employee:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to delete an employee
app.delete('/api/employees/:employeeId', authenticateToken, async (req, res) => {
  const { employeeId } = req.params;
  try {
    const employee = await Employee.findByPk(employeeId);
    if (!employee) {
      return res.status(404).json({ error: 'Employee not found' });
    }
    await employee.destroy();
    res.sendStatus(204); // No content success response
  } catch (err) {
    console.error('Error deleting employee:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start server
const PORT = process.env.PORT || 5000;
sequelize.sync().then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
  });
});
```

### 3. Frontend Interface using React

#### Components Overview:
- **EmployeeList**: Display a list of employees with options to view, edit, and delete.
- **EmployeeForm**: Form to add new employees or edit existing ones.
- **DepartmentRoleForm**: Form to assign employees to departments and roles.
- **PerformanceReviewForm**: Form to conduct and record performance reviews.

#### Example Implementation:

##### `EmployeeList.js`

```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);

  useEffect(() => {
    fetchEmployees();
  }, []);

  const fetchEmployees = async () => {
    try {
      const response = await axios.get('/api/employees');
      setEmployees(response.data);
    } catch (error) {
      console.error('Error fetching employees:', error);
    }
  };

  const handleDelete = async (employeeId) => {
    try {
      await axios.delete(`/api/employees/${employeeId}`);
      fetchEmployees();
    } catch (error) {
      console.error('Error deleting employee:', error);
    }
  };

  return (
    <div>
      <h2>Employee List</h2>
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {employees.map((employee, index) => (
            <tr key={employee.employee_id}>
              <td>{index + 1}</td>
              <td>{`${employee.first_name} ${employee.last_name}`}</td>
              <td>{employee.email}</td>
              <td>{employee.phone}</td>
              <td>
                <button onClick={() => handleDelete(employee.employee_id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeList;
```

##### `EmployeeForm.js`

```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EmployeeForm = ({ employeeId }) => {
  const [employee, setEmployee] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone: '',
    hire_date: '',
    department_id: '',
    role_id: '',
  });

  useEffect(() => {
    if (employeeId) {
      fetchEmployee(employeeId);
    }
  }, [employeeId]);

  const fetchEmployee = async (id) => {
    try {
      const response = await axios.get(`/api/employees/${id}`);


      setEmployee(response.data);
    } catch (error) {
      console.error('Error fetching employee:', error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEmployee(prevEmployee => ({
      ...prevEmployee,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (employeeId) {
        await axios.put(`/api/employees/${employeeId}`, employee);
      } else {
        await axios.post('/api/employees', employee);
      }
      // Handle success (e.g., show success message, redirect)
    } catch (error) {
      console.error('Error saving employee:', error);
    }
  };

  return (
    <div>
      <h2>{employeeId ? 'Edit Employee' : 'Add Employee'}</h2>
      <form onSubmit={handleSubmit}>
        <label>
          First Name:
          <input type="text" name="first_name" value={employee.first_name} onChange={handleChange} required />
        </label>
        <label>
          Last Name:
          <input type="text" name="last_name" value={employee.last_name} onChange={handleChange} required />
        </label>
        <label>
          Email:
          <input type="email" name="email" value={employee.email} onChange={handleChange} required />
        </label>
        <label>
          Phone:
          <input type="text" name="phone" value={employee.phone} onChange={handleChange} />
        </label>
        <label>
          Hire Date:
          <input type="date" name="hire_date" value={employee.hire_date} onChange={handleChange} />
        </label>
        <label>
          Department ID:
          <input type="text" name="department_id" value={employee.department_id} onChange={handleChange} />
        </label>
        <label>
          Role ID:
          <input type="text" name="role_id" value={employee.role_id} onChange={handleChange} />
        </label>
        <button type="submit">{employeeId ? 'Update' : 'Add'} Employee</button>
      </form>
    </div>
  );
};

export default EmployeeForm;
```

### 4. Role-Based Access Control (RBAC)

Implement RBAC using JWT tokens in the backend (`server.js`) to restrict access to certain API endpoints based on user roles. 
You can use middleware functions to verify and decode JWT tokens and then grant or deny access accordingly.

### Summary

This outline provides a structured approach to building a HRMS with a database schema, RESTful API backend using Node.js and Express, and a 
frontend interface using React. Adjustments can be made based on specific business requirements and additional functionalities like performance
reviews and department assignments. Ensure to handle error cases and implement security measures such as authentication and authorization to safeguard employee data.
