To meet the requirements for a CRM system, we'll outline the database schema, develop RESTful APIs using Node.js and Express for managing customer data, 
interactions, and opportunities, and create a basic frontend interface using React for sales representatives.

### 1. Database Schema Design

Based on the CRM system requirements, here's a proposed database schema:

#### Tables:

- **customers**:
  - `customer_id` (Primary Key)
  - `first_name`
  - `last_name`
  - `email`
  - `phone`
  - `address`
  - `created_at`
  - `updated_at`

- **contacts**:
  - `contact_id` (Primary Key)
  - `customer_id` (Foreign Key to `customers`)
  - `first_name`
  - `last_name`
  - `email`
  - `phone`
  - `created_at`
  - `updated_at`

- **opportunities**:
  - `opportunity_id` (Primary Key)
  - `customer_id` (Foreign Key to `customers`)
  - `opportunity_name`
  - `amount`
  - `stage` (e.g., prospecting, negotiation, closed-won, closed-lost)
  - `close_date`
  - `created_at`
  - `updated_at`

- **interactions**:
  - `interaction_id` (Primary Key)
  - `customer_id` (Foreign Key to `customers`)
  - `interaction_type` (call, meeting, email, etc.)
  - `interaction_date`
  - `notes`
  - `created_at`
  - `updated_at`

### 2. Backend API using Node.js and Express

#### Dependencies:
- Express.js: Web framework for Node.js
- Sequelize: ORM for SQL databases
- JSON Web Tokens (JWT): For authentication and authorization
- bcryptjs: For hashing passwords

#### Example API Implementation:

Assuming you have Sequelize configured with a PostgreSQL database, here's an example of how you might implement the backend API endpoints:

##### `server.js`

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Sequelize, DataTypes } = require('sequelize');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Replace with your actual database connection details
const sequelize = new Sequelize('database_name', 'username', 'password', {
  host: 'localhost',
  dialect: 'postgres',
});

// Define models
const Customer = sequelize.define('Customer', {
  customer_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  first_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  last_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  phone: DataTypes.STRING,
  address: DataTypes.STRING,
});

const Contact = sequelize.define('Contact', {
  contact_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  first_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  last_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  phone: DataTypes.STRING,
});

const Opportunity = sequelize.define('Opportunity', {
  opportunity_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  opportunity_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  amount: DataTypes.FLOAT,
  stage: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  close_date: DataTypes.DATE,
});

const Interaction = sequelize.define('Interaction', {
  interaction_id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  interaction_type: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  interaction_date: {
    type: DataTypes.DATE,
    allowNull: false,
  },
  notes: DataTypes.TEXT,
});

// Define associations
Customer.hasMany(Contact);
Customer.hasMany(Opportunity);
Customer.hasMany(Interaction);

// Example authentication middleware with JWT
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// Routes
// Example route to get all customers
app.get('/api/customers', authenticateToken, async (req, res) => {
  try {
    const customers = await Customer.findAll();
    res.json(customers);
  } catch (err) {
    console.error('Error fetching customers:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to add a new customer
app.post('/api/customers', authenticateToken, async (req, res) => {
  const { first_name, last_name, email, phone, address } = req.body;
  try {
    const newCustomer = await Customer.create({
      first_name,
      last_name,
      email,
      phone,
      address,
    });
    res.status(201).json(newCustomer);
  } catch (err) {
    console.error('Error adding customer:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to update a customer
app.put('/api/customers/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;
  const { first_name, last_name, email, phone, address } = req.body;
  try {
    const customer = await Customer.findByPk(customerId);
    if (!customer) {
      return res.status(404).json({ error: 'Customer not found' });
    }
    await customer.update({
      first_name,
      last_name,
      email,
      phone,
      address,
    });
    res.json(customer);
  } catch (err) {
    console.error('Error updating customer:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Example route to delete a customer
app.delete('/api/customers/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;
  try {
    const customer = await Customer.findByPk(customerId);
    if (!customer) {
      return res.status(404).json({ error: 'Customer not found' });
    }
    await customer.destroy();
    res.sendStatus(204); // No content success response
  } catch (err) {
    console.error('Error deleting customer:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start server
const PORT = process.env.PORT || 5000;
sequelize.sync().then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
  });
});
```

### 3. Frontend Interface using React

#### Components Overview:
- **CustomerList**: Display a list of customers with options to view, edit, and delete.
- **CustomerForm**: Form to add new customers or edit existing ones.
- **InteractionLogForm**: Form to log interactions (calls, meetings, emails) with customers.
- **OpportunityTracker**: Interface to track sales opportunities and their stages.
- **Dashboard**: Component to show key metrics like number of opportunities, stages, and customer interaction history.

#### Example Implementation:

##### `CustomerList.js`

```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CustomerList = () => {
  const [customers, setCustomers] = useState([]);

  useEffect(() => {
    fetchCustomers();
  }, []);

  const fetchCustomers = async () => {
    try {
      const response = await axios.get('/api/customers');
      setCustomers(response.data);
    } catch (error) {
      console.error('Error fetching customers:', error);
    }
  };

  const handleDelete = async (customerId) => {
    try {
      await axios.delete(`/api/customers/${customerId}`);
      fetchCustomers();
    } catch (error) {
      console.error('Error deleting customer:', error);
    }
  };

  return (
    <div>
      <h2>Customer List</h2>
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {customers.map((customer, index) => (
            <tr key={customer.customer_id}>
              <td>{index + 1}</td>
              <td>{`${customer.first_name} ${customer.last_name}`}</td>
              <td>{customer.email}</td>
              <td>{customer.phone}</td>
              <td>
                <button onClick={() => handleDelete(customer.customer_id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CustomerList;
```

##### `CustomerForm.js`

```jsx
import React, { useState } from 'react';
import axios from 'axios';

const CustomerForm = () => {
  const [

customer, setCustomer] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone: '',
    address: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCustomer(prevCustomer => ({
      ...prevCustomer,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/api/customers', customer);
      // Handle success (e.g., show success message, redirect)
    } catch (error) {
      console.error('Error adding customer:', error);
    }
  };

  return (
    <div>
      <h2>Add Customer</h2>
      <form onSubmit={handleSubmit}>
        <label>
          First Name:
          <input type="text" name="first_name" value={customer.first_name} onChange={handleChange} required />
        </label>
        <label>
          Last Name:
          <input type="text" name="last_name" value={customer.last_name} onChange={handleChange} required />
        </label>
        <label>
          Email:
          <input type="email" name="email" value={customer.email} onChange={handleChange} required />
        </label>
        <label>
          Phone:
          <input type="text" name="phone" value={customer.phone} onChange={handleChange} />
        </label>
        <label>
          Address:
          <input type="text" name="address" value={customer.address} onChange={handleChange} />
        </label>
        <button type="submit">Add Customer</button>
      </form>
    </div>
  );
};

export default CustomerForm;
```

### 4. Role-Based Access Control (RBAC)

Implement RBAC using JWT tokens in the backend (`server.js`) to restrict access to certain API endpoints based on user roles. You can use middleware functions
to verify and decode JWT tokens and then grant or deny access accordingly.

### Summary

This setup provides a foundation for a CRM system including database schema design, backend API implementation using Node.js and Express with Sequelize, and a basic 
frontend interface using React. Further enhancements can be made based on specific business requirements such as additional functionalities for interactions logging, 
opportunity tracking, and dashboard metrics display. Ensure to handle error cases and implement security measures such as authentication and authorization to protect 
customer data.
